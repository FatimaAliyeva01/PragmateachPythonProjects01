# -*- coding: utf-8 -*-
"""Task_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/FatimaAliyeva01/b0e64a9cd033284f46cc94b0cc22d4f0/task_02.ipynb

# Task_02
"""

#Tapsiriq_01
# Hər hansı bir natural n ədədini götürək. Onu növbəti şəkildə dəyişdirəcəyik:
# Əgər ədəd cütdürsə, onda onu 2-ə bölək, əgər təkdirsə ona 1 əlavə edək. 
# Bir neçə belə dəyişmədən sonra həmişə 1 alacağıq. Məsələn, 11 ədədindən 12 ədədi alınır, sonra 6, 3, 4, 2 və sonda 1. Beləliklə, 11-dən 1 almaq üçün 6 dəyişiklik etmək lazımdır.
# Verilmiş natural ədədə görə 1 alınana qədər onun dəyişmələrinin sayını tapın.
#Basa dusmedim

#Tapsiriq_02
#n natural ədədi verilmişdir. Əgər n ədədi hər hansı bir m natural ədədinin kvadratıdırsa, onda m ədədini çap edin, əks halda No çap edin.
# Məsələn: User 25 daxil etsə ekrana 5 verilsin 27 daxil etsə, NO yazılsın
n=int(input('eded daxil edin '))
if (n**0.5)%1==0:
    m=n**0.5
    print(m)
else:
    print('NO')

# Tapsiriq-03
# User bir ədəd daxil etsin həmin ədədə qədər bütün ədədləri çapa verin.

def istediyimiz_eded(N):
    if (N <= 0):
        return;
    else:
        print(N, end = " ")

        istediyimiz_eded(N - 1)
N = 10
istediyimiz_eded(N)

# Tapsiriq-04
# İnternetdən bir mətni bir dəyişkəndə saxlayın. Həmin mətnin cüt indexlərində olan simvolları bir sətirdə çapa verin.
metn='İnternetdən bir mətni bir dəyişkəndə saxlayın. Həmin mətnin cüt indexlərində olan simvolları bir sətirdə çapa verin'
for i in range(2,len(metn),2):
    print(metn[i])

# Tapsiriq-05
# Random bir rəqəm götürsün proqram 1-4 aralığında. 
# İstifadəçidən həmin rəqəmi təxmin etməyi istəyin. 
# Hər doğru təxmin etdikcə istifadəçi bir xal qazansın. 
# 5 xala çatanda istifadəçinin 5 xala çatması üçün etdiyi cəhdlərin sayını çapa verin.
a = int(input())
for  i in  range (a<=4):
  i+=1
  print("tebrikler 5 xal hediyye")

#Tapsiriq_06
#Userdən daxil etmısini tələb edin. 1-dən sonra gələn ən kiçik bölünəni çapa verin.
a=int(input('eded daxil edin  '))
bolen=2
while a%bolen!=0:
    bolen+=1
print(bolen)

# Tapsiriq_07
# Masa üzərində n sikkə var. Onların bəzilərinin reşka (1) üzü, bəzilərinin isə gerb( 0) üzü yuxarıdır.
# Bütün sikkələrin eyni üzlərinin yuxarı olması üçün çevriləcək sikkələrin minimal sayını tapın. 
#İstifadəçi birinci inputda sikkələrin sayını daxil edir.
#O daxil etdiyi sayda siz userdən sikkələrin hansı üzdə düşdüyünü soruşmalısız. 
#Bütün üzləri daxil etdikdən sora siz bütün sikkələri eyni üzə çevirmək üçün ən minumum sayı tapmalısız. 
#Məsələn birinci inputda sikkələrin sayını user 5 daxil edib. Ardınca 5 sikkənin hər birinin üzünü daxil edir. 1, 0, 0, 1, 0. Bu sikkələrin üzünü bir etmək üçün iki yolumuz var: ya hamısını 0 ya da hamısını 1 etməliyik. 1-ləri 0 etmək daha qısa yoldur, çünki onların sayı azdır. 
# Bu səbəbdən edəcəyimiz minimal hərəkət sayı ikidir. Əgər 0 və 1 eyni sayda olarsa, EQUAL çapa verin.
n=int(input())
reska=0
gerb=0
for i in range(n):
  qepik=int(input())
  if qepik==1:
      reska+=1
  else:
    gerb+=1
print(min(reska,gerb))

# Tapsiriq-08
#Userdən bir ədəd daxil etməsini tələb edin. Ekrana həmin ədəddəki ədədlərin hasilini çapa verin.

num = 7
for i in range(1,8):
   print(num, 'x', i, '=', num*i)

# Tapsiriq_09
# Kvadrat tənliyin əmsallarını daxil etsin user. Həmin əmsallara görə tənliyin köklərini daxil edin.
# Aşağıdakı linkdən kvadrat tənlik haqda məlumat əldə edə bilərsiz https://az.wikipedia.org/wiki/Kvadrat_t%C9%99nlik

#Tapsiriq_10
# 1-50 arasında ədədlərdən 3-ə bölünən ədədlərə three, 
# 5-ə bölünən ədədlərə five, həm 3 və həm də 5-ə bölünənlərə isə ThreeFive print edin. 
# Əgər heç birinə bölünməsə sadəcə ədədin özünü çapa verin.
n=int(input())
if n<=50:
  print(n//3,'three' and n//5 ,'ThreeFive')
  if n<=50:
    print(n//3 ,'ThreeFive')
elif n<=50:
  print(n//5,'five')
else:
  print(n)

